{
	"name": "dataflow3",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"linkedService": {
						"referenceName": "AzureDataLakeStorage1",
						"type": "LinkedServiceReference"
					},
					"name": "source1"
				},
				{
					"linkedService": {
						"referenceName": "AzureSqlDatabase1",
						"type": "LinkedServiceReference"
					},
					"name": "source2"
				}
			],
			"sinks": [
				{
					"linkedService": {
						"referenceName": "AzureSqlDatabase1",
						"type": "LinkedServiceReference"
					},
					"name": "sink1"
				},
				{
					"linkedService": {
						"referenceName": "AzureSqlDatabase1",
						"type": "LinkedServiceReference"
					},
					"name": "sink2"
				}
			],
			"transformations": [
				{
					"name": "select1"
				},
				{
					"name": "derivedColumn1"
				},
				{
					"name": "lookup2"
				},
				{
					"name": "Insert"
				},
				{
					"name": "derivedColumn2"
				},
				{
					"name": "derivedColumn3"
				},
				{
					"name": "alterRow1"
				}
			],
			"scriptLines": [
				"source(output(",
				"          payment_id as short,",
				"          loan_id as short,",
				"          payment_date as date,",
				"          payment_amount as double,",
				"          RowColumn as boolean",
				"     ),",
				"     useSchema: false,",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'delimited',",
				"     fileSystem: 'input',",
				"     columnDelimiter: ',',",
				"     escapeChar: '\\\\',",
				"     quoteChar: '\\\"',",
				"     columnNamesAsHeader: true,",
				"     wildcardPaths:['Silver/loan_payments/*.csv']) ~> source1",
				"source(output(",
				"          payment_id as integer,",
				"          hashkey as long",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'query',",
				"     store: 'sqlserver',",
				"     query: 'select payment_id,hashkey from loan_payments',",
				"     isolationLevel: 'READ_UNCOMMITTED') ~> source2",
				"source1 select(mapColumn(",
				"          src_payment_id = payment_id,",
				"          src_loan_id = loan_id,",
				"          src_payment_date = payment_date,",
				"          src_payment_amount = payment_amount",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select1",
				"select1 derive(src_Hashkey = crc32(src_payment_id,src_loan_id,src_payment_date,src_payment_amount)) ~> derivedColumn1",
				"derivedColumn1, source2 lookup(src_payment_id == payment_id,",
				"     multiple: false,",
				"     pickup: 'any',",
				"     broadcast: 'auto')~> lookup2",
				"lookup2 split(!isNull(src_payment_id) && isNull(payment_id),",
				"     payment_id == src_payment_id && src_Hashkey!=hashkey,",
				"     disjoint: false) ~> Insert@(Insert, Update)",
				"Insert@Insert derive(src_createdBy = \"Dataflow\",",
				"          src_createdDate = currentTimestamp(),",
				"          src_updatedBy = \"Dataflow\",",
				"          src_updatedDate = currentTimestamp()) ~> derivedColumn2",
				"Insert@Update derive(src_createdBy = \"Dataflow\",",
				"          src_createdDate = currentTimestamp(),",
				"          src_updatedBy = \"Dataflow-Updated\",",
				"          src_updatedDate = currentTimestamp()) ~> derivedColumn3",
				"derivedColumn3 alterRow(updateIf(1==1)) ~> alterRow1",
				"derivedColumn2 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          payment_id as integer,",
				"          loan_id as integer,",
				"          payment_date as date,",
				"          payment_amount as decimal(10,2),",
				"          created_date as timestamp,",
				"          created_by as string,",
				"          updated_date as timestamp,",
				"          updated_by as string,",
				"          hashkey as long",
				"     ),",
				"     format: 'table',",
				"     store: 'sqlserver',",
				"     schemaName: 'dbo',",
				"     tableName: 'loan_payments',",
				"     insertable: true,",
				"     updateable: false,",
				"     deletable: false,",
				"     upsertable: false,",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError',",
				"     mapColumn(",
				"          payment_id = src_payment_id,",
				"          loan_id = src_loan_id,",
				"          payment_date = src_payment_date,",
				"          payment_amount = src_payment_amount,",
				"          hashkey = src_Hashkey,",
				"          created_by = src_createdBy,",
				"          created_date = src_createdDate,",
				"          updated_by = src_updatedBy,",
				"          updated_date = src_updatedDate",
				"     )) ~> sink1",
				"alterRow1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          payment_id as integer,",
				"          loan_id as integer,",
				"          payment_date as date,",
				"          payment_amount as decimal(10,2),",
				"          created_date as timestamp,",
				"          created_by as string,",
				"          updated_date as timestamp,",
				"          updated_by as string,",
				"          hashkey as long",
				"     ),",
				"     format: 'table',",
				"     store: 'sqlserver',",
				"     schemaName: 'dbo',",
				"     tableName: 'loan_payments',",
				"     insertable: false,",
				"     updateable: true,",
				"     deletable: false,",
				"     upsertable: false,",
				"     keys:['payment_id'],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError',",
				"     mapColumn(",
				"          payment_id = src_payment_id,",
				"          loan_id = src_loan_id,",
				"          payment_date = src_payment_date,",
				"          payment_amount = src_payment_amount,",
				"          hashkey = src_Hashkey,",
				"          hashkey,",
				"          updated_by = src_updatedBy,",
				"          updated_date = src_updatedDate",
				"     )) ~> sink2"
			]
		}
	}
}